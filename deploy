#!/bin/bash

if [[ $1 =~ servers= ]]; then
	hosts="$(cat $(echo $1 | awk -F'=' '{print $NF}'))"
	command=$2
elif [ -f ~/.docker-bash-deploy ]; then
	hosts="$(awk -F'=' '/servers/{print $NF}' ~/.docker-bash-deploy)"
	command=$1
elif [ -f /usr/local/bin/deploy ]; then
	command=$1
else
	echo "You need to provide the serverlist with servers=myfile or"
	echo "define the servers in the configuration."
fi

set -e

if [ -z $command ]; then
	echo    "usage: [servers=hosts-file] command"
	exit 1
fi

##
# Executed on the local system.
##

remote_command_raw() {
	local host=$1
	shift
	ssh -l root $host $@
}

remote_command() {
	local host=$1
	shift
	ssh -l root $host deploy $@
}

list_servers() {
	for server in $hosts; do
		echo -en "\e[1m$server\e[0m: "
		remote_command_raw $server lsb_release -ris | tr '\n' ' '
		echo -n "⇨ $(remote_command_raw $server docker -v) " \
			"containers: $(remote_command_raw $server docker ps -q 2> /dev/null | wc -l)"
		echo
		list_apps $server
		echo
	done
}

setup_script_on_remote_host() {
	local host=$1
	shift
	scp $0 root@$host:/usr/local/bin/deploy
	ssh root@$host chmod +x /usr/local/bin/deploy
}

list_apps() {
	local host=$1

	for uid in $(remote_command_raw $host docker ps --no-trunc -q); do
		local app=$(get_app_from_id $host $uid)
		local port=$(get_metadata $host $app port)
		local image=$(get_metadata $host $app image)

		echo "$app($image):80 ⇄ $port"
	done
}

save_metadata() {
	local host=$1
	local app=$2
	local key=$3
	local value=$4

	remote_command_raw $host "mkdir -p /tmp/docker/$app"
	remote_command_raw $host "echo $value > /tmp/docker/$app/$key"
}

get_metadata() {
	local host=$1
	local app=$2
	local key=$3

	remote_command_raw $host cat /tmp/docker/$app/$key
}

get_app_from_id() {
	local host=$1
	local uid=$2

	remote_command $host grep -l $uid '/tmp/docker/*/id' | awk -F'/' '{print $4}'
}

get_app() {
	local host=$1
	local app=$2

	echo -e "\e[1m$host\e[0m:"
	remote_command_raw $host "
		for f in /tmp/docker/$app/*; do
			echo -n \"\${f##*/} ↠ \"; cat \$f;
		done"
	echo
}

##
# Executed on the remote system.
##

find_free_port() {
	for port in $(seq 30000 39999); do
		if ! netstat -nta | grep -q $port; then
			echo $port;
			break;
		fi;
	done
}

has_app() {
	local chapp=$1

	for uid in $(docker ps --no-trunc -q); do
		local app=$(get_app_from_id_remote $uid)
		if [ x$app == x$chapp ]; then
			echo yes
			return;
		fi
	done
}

get_app_from_id_remote() {
	local uid=$1

	grep -l $uid /tmp/docker/*/id | awk -F'/' '{print $4}'
}

save_metadata_remote() {
	local app=$1
	local key=$2
	local value=$3

	mkdir -p /tmp/docker/$app
	echo $value > /tmp/docker/$app/$key
}

check_release() {
	local host=$1
	local version=$(lsb_release -rs)

	# Make sure this is a supported version
	case $version in
		14.04)
			echo "Detected Ubuntu $version LTS, supported!"
			;;
		*)
			echo "Detected $version, not supported."
			echo "Aborted!"
			exit 1
			;;
	esac
}

setup_packages() {
	local host=$1

	check_release $host

	# Install Docker from the latest Docker repos
	apt-key adv \
		--keyserver hkp://keyserver.ubuntu.com:80 \
		--recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
	echo deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list
	apt-get update
	apt-get install -y lxc-docker

	# Install nginx and configure nginx
	apt-get install -y nginx
	rm -f /etc/nginx/sites-available/* /etc/nginx/sites-enabled/*
}

deploy_container() {
	local app=$1
	local image=$2
	local port=$(find_free_port)

	mkdir -p /tmp/docker/$app

	echo -e "Deploying \e[1m$app\e[0m ($image) on port $port"
	echo $port > /tmp/docker/$app/port
	local app_id=$(docker run -d -p $port:80 --name app-$app-$port-$RANDOM $image)

	configure_nginx $app $port
	save_metadata_remote $app id $app_id
	save_metadata_remote $app image $image

	echo "Finding old instances of $app to undeploy on $host"
	for id in $(docker ps --no-trunc | grep -v :$port | grep app-${app}- | awk '{print $1}'); do
		docker stop $id
	done
}

undeploy_container() {
	local app=$1

	if [ x$(has_app $app) == xyes ]; then
		echo -e "\e[1mUndeploy $app\e[0m"
		docker stop $(cat /tmp/docker/$app/id)
		rm -f /etc/nginx/conf.d/${app}.conf
		nginx -s reload
		rm -rf /tmp/docker/$app
	fi
}

configure_nginx() {
	local app=$1
	local port=$2

	echo "
	server {
		listen 80;
		server_name ${app}.stefanberggren.se;
		location / {
			proxy_pass http://127.0.0.1:$port;
		}
	}
	" > /etc/nginx/conf.d/${app}.conf
	nginx -s reload
}



##
# Control
##

case $command in

	# Execute these on the local system

	setup)
		for host in $hosts; do
			setup_script_on_remote_host $host
			#remote_command $host setup-packages
		done
		;;
	deploy)
		shift
		for host in $hosts; do
			remote_command $host deploy-remote $@
		done
		;;
	undeploy)
		shift
		for host in $hosts; do
			remote_command $host undeploy-remote $@
		done
		;;
	list)
		for host in $hosts; do
			echo -e "\e[1m$host\e[0m:"
			list_apps $host
			echo
		done
		;;
	servers)
		list_servers
		;;
	set)
		shift
		if [ -z $4 ]; then
			for host in $hosts; do
				echo "set $1.$2=$3 at $host"
				save_metadata $host $1 $2 $3
			done
		else
			echo "set $2.$3=$4 at $1"
			save_metadata $host $1 $2 $3 $4
		fi
		;;
	get)
		shift
		for host in $hosts; do
			get_app $host $1
		done
		;;
	
	# These are executed on the remote system

	setup-packages)
		setup_packages
		;;
	deploy-remote)
		shift
		deploy_container $@
		;;
	undeploy-remote)
		shift
		undeploy_container $@
		;;

	*)
		echo "Unknown command: $command"
		;;
esac
