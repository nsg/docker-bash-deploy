#!/bin/bash

REMOTE_DEPLOY_COMMAND=remote-deploy
GIT_VERSION=HEAD

show_help() {
	echo -e "\e[1m`basename $0`\e[0m based on commit $GIT_VERSION"
	echo -e "This is a simple deployment tool written in bash."
	echo
	case $1 in
		deploy)
			echo -e "usage:    `basename $0` \e[1mdeploy -[aio]\e[0m"
			echo
			echo -e "Deploy a new, or replace a container."
			echo
			echo -e "  \e[1m-a\e[0m      The name of the app"
			echo -e "  \e[1m-i\e[0m      Name of the image"
			echo -e "  \e[1m-o\e[0m      The domain"
			echo
			echo -e "Example:"
			echo
			echo -e "To deploy the image nginx on test.example.com:"
			echo -e "`basename $0` deploy -i nginx -a test -o example.com"
			;;
		undeploy)
			echo -e "usage:    `basename $0` \e[1mundeploy -[ao]\e[0m"
			echo
			echo -e "Undeploy (remove) a container."
			echo
			echo -e "  \e[1m-a\e[0m      The name of the app"
			echo -e "  \e[1m-o\e[0m      The domain"
			echo
			echo -e "Example:"
			echo
			echo -e "To undeploy test.example.com:"
			echo -e "`basename $0` undeploy -a test -o example.com"
			;;
		meta)
			echo -e "usage:    `basename $0` \e[1mmeta -[aokv]\e[0m"
			echo -e "usage:    `basename $0` \e[1mmeta -[ao]\e[0m"
			echo
			echo -e "Set or get metadata to an app."
			echo
			echo -e "  \e[1m-a\e[0m      The name of the app"
			echo -e "  \e[1m-o\e[0m      The domain"
			echo -e "  \e[1m-k\e[0m      Name of the key"
			echo -e "  \e[1m-v\e[0m      Name of the value"
			echo
			echo -e "Set the value (-v) to false to remove a key."
			echo
			echo -e "Special keys:"
			echo
			echo -e "  \e[1mdefault\e[0m      This is the default nginx container."
			echo -e "  \e[1mENV_*\e[0m        To set the Docker env 'FOO', set ENV_FOO."
			echo
			echo -e "Examples:"
			echo
			echo -e "To get metadata for test.example.com:"
			echo -e "`basename $0` meta -a test -o example.com"
			echo
			echo -e "Set metadata for test.example.com:"
			echo -e "`basename $0` meta -a test -o example.com -k mykey -v myvalue"
			;;
		install)
			echo -e "usage:    `basename $0` \e[1minstall [full|remote]\e[0m"
			echo
			echo -e "  \e[1mfull\e[0m      Check installed apps and do a full reconfigure."
			echo -e "  \e[1mremote\e[0m    Only update the remote script."
			echo
			echo -e "Setup the servers, install needed applications."
			echo
			echo -e "First time using this tool? You need to have passwordless root"
			echo -e "access to the server. Verify that with 'ssh root@example.com'."
			echo -e "Do a full install with `basename $0` install full."
			;;
		config)
			echo -e "usage:    `basename $0` \e[1mconfig show\e[0m"
			echo
			echo -e "  \e[1mshow\e[0m      Show loaded config."
			echo
			echo -e "Example configuration file:"
			echo
			echo -e "  servers=10.0.0.2 example.com"
			echo -e "  domain=example.com"
			;;
		*)
			echo -e "usage:    `basename $0` \e[1m[deploy|undeploy|meta|list|install|config] [-DcH]\e[0m"
			echo
			echo -e "  \e[1m-D\e[0m        Show debug messages"
			echo -e "  \e[1m-c path\e[0m   Path to config file"
			echo -e "            Default is ~/.docker-bash-deploy"
			echo -e "  \e[1m-H host\e[0m   Provide a list of hosts on the commandline"
			echo -e "            This overloads settings from -c"
			echo
			echo -e "Example:"
			echo
			echo -e "To limit a deploy to a specific host"
			echo -e "`basename $0` deploy \e[1m-H 10.0.0.2\e[0m" -i nginx test -a text -o example.com
			echo
			echo -e "Specify a custom config file"
			echo -e "`basename $0` deploy \e[1m-c ../myfile\e[0m" -i nginx test -a text -o example.com
	esac

	exit 0
}

load_config() {
	local file=$1

	if [ ! -f $file ]; then
		echo "Config file '$file' not found" 2>&1
		exit 1
	fi

	hosts="$(awk -F'=' '/servers/{print $NF}' $file)"
	domain="$(awk -F'=' '/domain/{print $NF}' $file)"
}

get_app() {
	local host=$1
	local domain=$2
	local app=$3

	echo -e "\e[1m$host\e[0m:"
	remote_command_raw $host "
		for f in /tmp/docker/$domain/$app/*; do
			echo -n \"\${f##*/} ↠ \"; cat \$f;
		done"
	echo
}

remote_command() {
	local host=$1
	shift
	ssh -l root $host deploy $GIT_VERSION $@
}

remote_command_raw() {
	local host=$1
	shift
	ssh -l root $host $@
}

save_metadata() {
	local host=$1
	local domain=$2
	local app=$3
	local key=$4
	local value=$5

	remote_command_raw $host "mkdir -p /tmp/docker/$domain/$app"
	if [ "x$value" == "xfalse" ]; then
		remote_command_raw $host "rm /tmp/docker/$domain/$app/$key"
	else
		remote_command_raw $host "echo $value > /tmp/docker/$domain/$app/$key"
	fi
}

# Select mode
case $1 in
	config)
		__show_config=true
		[ -z $2 ] && show_help $1
		shift 2
		;;
	list)
		__list=true
		shift
		;;
	install)
		__install=$2
		[ -z $2 ] && show_help $1
		shift
		;;
	deploy)
		__deploy=true
		[ -z $2 ] && show_help $1
		shift
		;;
	undeploy)
		__undeploy=true
		[ -z $2 ] && show_help $1
		shift
		;;
	meta)
		__metadata=true
		[ -z $2 ] && show_help $1
		shift
		;;
	*)
		show_help
		;;
esac

# Global flags
while getopts "hDc:i:H:sk:v:a:o:" opt; do
	case $opt in
		h)
			show_help
			;;
		D)
			__debug=true
			;;
		c)
			__config="$OPTARG"
			;;
		i)
			__image="$OPTARG"
			;;
		H)
			__host="$OPTARG"
			;;
		s)
			__servers=true
			;;
		k)
			__key="$OPTARG"
			;;
		v)
			__value="$OPTARG"
			;;
		a)
			__app="$OPTARG"
			;;
		o)
			__domain="$OPTARG"
			;;
	esac
done

[ $__debug ] && echo "debug mode: true"

# Load config
if [ $__config ]; then
	load_config $__config
elif [ -f ~/.docker-bash-deploy ]; then
	load_config ~/.docker-bash-deploy
else
	echo "No hosts loaded, abort!" 2>&1
	exit 1
fi
if [ $__host ]; then
	hosts=$__host
fi
if [ $__domain ]; then
	domain=$__domain
fi
[ $__debug ] && echo "hosts: $hosts"
[ $__debug ] && echo "domain: $domain"

# Show config
if [ $__show_config ]; then
	echo "Loaded config file:"
	if [ $__config ]; then
		cat $__config
	else
		cat ~/.docker-bash-deploy
	fi
	echo
	echo "Set config to:"
	echo "servers=$hosts"
	echo "domain=$domain"
fi

# Install the remote half of the script
if [ $__install ]; then
	for host in $hosts; do

		if [ "x$__install" == "xfull" ] || [ "x$__install" == "xremote" ]; then
			scp $REMOTE_DEPLOY_COMMAND root@$host:/usr/local/bin/deploy
			ssh root@$host chmod +x /usr/local/bin/deploy
		fi

		if [ "x$__install" == "xfull" ]; then
			remote_command $host setup
		fi
	done
fi

# List running containers
if [ $__list ]; then
	for host in $hosts; do
		echo -e "\e[1m$host\e[0m:"
		remote_command $host list
		echo
	done
fi

# Deploy a container
if [ $__deploy ] && [ $__app ] && [ $__image ] && [ $domain ]; then
	for host in $hosts; do
		echo -e "\e[1m$host\e[0m: "
		remote_command $host deploy $domain $__app $__image
	done
fi

# Undeploy a container
if [ $__undeploy ] && [ $__app ] && [ $domain ]; then
	for host in $hosts; do
		echo -e "\e[1m$host\e[0m: "
		remote_command $host undeploy $domain $__app
	done
fi

# List server status
if [ $__servers ]; then
	for host in $hosts; do
		echo -en "\e[1m$host\e[0m: "
		remote_command_raw $host lsb_release -ris | tr '\n' ' '
		echo -n "⇨ $(remote_command_raw $host docker -v) " \
			"containers: $(remote_command_raw $host docker ps -q 2> /dev/null | wc -l)"
		echo
		remote_command $host list
		echo
	done
fi

# Set metadata
if [ $__metadata ] && [ $__app ] && [ $__key ] && [ $__value ] && [ $domain ]; then
	for host in $hosts; do
		echo "set $__app.$domain: $__key=$__value at $host"
		save_metadata $host $domain $__app $__key $__value
	done
elif [ $__metadata ] && [ $__app ] && [ $domain ]; then
	for host in $hosts; do
		get_app $host $domain $__app
	done
fi
