#!/bin/bash

deploy_container() {
	local app=$1
	local image=$2
	local port=$(find_free_port)

	mkdir -p /tmp/docker/$app

	echo -e "Deploying \e[1m$app\e[0m ($image) on port $port"
	echo $port > /tmp/docker/$app/port
	local app_id=$(docker run -d -p $port:80 --name app-$app-$port-$RANDOM $image)

	configure_nginx $app $port
	save_metadata $app id $app_id
	save_metadata $app image $image

	echo "Finding old instances of $app to undeploy"
	for id in $(docker ps --no-trunc | grep -v :$port | grep app-${app}- | awk '{print $1}'); do
		docker stop $id
	done
}

undeploy_container() {
	local app=$1

	if [ x$(has_app $app) == xyes ]; then
		echo -e "\e[1mUndeploy $app\e[0m"
		docker stop $(cat /tmp/docker/$app/id)
		rm -f /etc/nginx/conf.d/${app}.conf
		nginx -s reload
		rm -rf /tmp/docker/$app
	fi
}

has_app() {
	local chapp=$1

	for uid in $(docker ps --no-trunc -q); do
		local app=$(get_app_from_id $uid)
		if [ x$app == x$chapp ]; then
			echo yes
			return;
		fi
	done
}

get_app_from_id() {
	local uid=$1

	grep -l $uid /tmp/docker/*/id | awk -F'/' '{print $4}'
}

configure_nginx() {
	local app=$1
	local port=$2

	echo "
	server {
		listen 80;
		server_name ${app}.stefanberggren.se;
		location / {
			proxy_pass http://127.0.0.1:$port;
		}
	}
	" > /etc/nginx/conf.d/${app}.conf
	nginx -s reload
}

save_metadata() {
	local app=$1
	local key=$2
	local value=$3

	mkdir -p /tmp/docker/$app
	echo $value > /tmp/docker/$app/$key
}

get_metadata() {
	local app=$1
	local key=$2

	cat /tmp/docker/$app/$key
}

find_free_port() {
	for port in $(seq 30000 39999); do
		if ! netstat -nta | grep -q $port; then
			echo $port;
			break;
		fi;
	done
}

setup_host() {
	check_release

	# Install Docker from the latest Docker repos
	apt-key adv \
		--keyserver hkp://keyserver.ubuntu.com:80 \
		--recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
	echo deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list
	apt-get update
	apt-get install -y lxc-docker

	# Install nginx and configure nginx
	apt-get install -y nginx
	rm -f /etc/nginx/sites-available/* /etc/nginx/sites-enabled/*
}

check_release() {
	local version=$(lsb_release -rs)

	# Make sure this is a supported version
	case $version in
		14.04)
			echo "Detected Ubuntu $version LTS, supported!"
			;;
		*)
			echo "Detected $version, not supported."
			echo "Aborted!"
			exit 1
			;;
	esac
}

list_apps() {
	for uid in $(docker ps --no-trunc -q); do
		local app=$(get_app_from_id $uid)
		local port=$(get_metadata $app port)
		local image=$(get_metadata $app image)

		echo "$app($image):80 â‡„ $port"
	done
}

case $1 in
	deploy)
		deploy_container $2 $3
		;;
	undeploy)
		undeploy_container $2
		;;
	setup)
		setup_host
		;;
	list)
		list_apps
		;;
esac
